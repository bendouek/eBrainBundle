<blocks app="Snap! 10.4.5, https://snap.berkeley.edu" version="2"><palette><category name="ebrain" color="245,0,210,1"/></palette><block-definition s="addJS %&apos;JS_FILE&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>JS_FILE</l></list><l>var po = document.createElement(&apos;script&apos;);&#xD;  po.type = &apos;text/javascript&apos;;&#xD;  po.async = true;&#xD;  po.innerHTML = JS_FILE;&#xD;  var s = document.getElementsByTagName(&apos;script&apos;)[0];&#xD;  s.parentNode.insertBefore(po, s)</l></block><list><block var="JS_FILE"/></list></block></script></block-definition><block-definition s="listify %&apos;jsonString&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:os dados JSON _ em formato de lista&#xD;</translations><inputs><input type="%mlt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>jsonString</l></list><l>return listify(JSON.parse(jsonString));&#xD;&#xD;function listify(jsonObject) {&#xD;  if (jsonObject instanceof Array) {&#xD;    return new List(jsonObject.map(function(eachElement) { return listify(eachElement)}));&#xD;  } else if (jsonObject instanceof Object) {&#xD;    return new List(Object.keys(jsonObject).map(function(eachKey) { return new List([eachKey,listify(jsonObject[eachKey])])} ))&#xD;  } else {&#xD;    return jsonObject&#xD;  }&#xD;}</l></block><list><block var="jsonString"/></list></block></block></script></block-definition><block-definition s="value at key %&apos;key&apos; of %&apos;lst&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:o valor com chave _ em _&#xD;</translations><inputs><input type="%s"></input><input type="%l"></input></inputs><script><block s="doWarp"><script><block s="doForEach"><l>each item</l><block var="lst"/><script><block s="doIf"><block s="reportVariadicEquals"><list><block s="reportListItem"><l>1</l><block var="each item"/></block><block var="key"/></list></block><script><block s="doReport"><block s="reportListItem"><l>2</l><block var="each item"/></block></block></script><list></list></block></script></block></script></block><block s="doReport"><l></l></block></script></block-definition><block-definition s="key: %&apos;key&apos; value: %&apos;value&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:um par (chave: _ , valor: _ )&#xD;</translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="reportNewList"><list><block var="key"/><block var="value"/></list></block></block></script></block-definition><block-definition s="fetch %&apos;url&apos; %&apos;data&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><custom-block s="create %s var %mult%txt"><l>sprite</l><list><l>response</l></list></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>url</l><l>proc</l></list><l>//Fetches data as a promise , on compleation saves to varable as text.&#xD;//if ((typeof varName) != "string") {&#xD;if ((typeof "response") != "string") {&#xD;    throw new Error("name isn&apos;t a string: " + varName);&#xD;}&#xD;&#xD;fetch(url)&#xD;  .then(response =&gt; response.json())&#xD;  .then(data =&gt; proc.homeContext.variables.setVar("response", JSON.stringify(data)));&#xD;&#xD;console.log(proc.homeContext.variables.allNames())</l></block><list><block var="url"/></list></block><block s="doWait"><l>0.2</l></block><block s="doReport"><block var="response"/></block></script></block-definition><block-definition s="%&apos;method&apos; url: %&apos;url&apos; send: %&apos;payload&apos; headers: %&apos;headers&apos;" type="reporter" category="sensing"><header></header><code></code><translations>pt:a resposta a _ de _ enviando _ e cabeçalhos _&#xD;</translations><inputs><input type="%s" readonly="true">GET<options>GET&#xD;POST&#xD;PUT&#xD;DELETE</options></input><input type="%s">https://snap.berkeley.edu</input><input type="%s"></input><input type="%mult%l" readonly="true"></input></inputs><script><custom-block s="create %s var %mult%txt"><l>sprite</l><list><l>response</l></list></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>chosen_method</l><l>url</l><l>payload</l><l>headers</l><l>proc</l></list><l>console.log(chosen_method)&#xD;&#xD;payload = JSON.parse(payload)&#xD;&#xD;if (chosen_method == "GET") {&#xD;    fetch(url, {&#xD;            method: chosen_method&#xD;        })&#xD;        .then(response =&gt; response.json())&#xD;        .then(data =&gt; proc.homeContext.variables.setVar("response", JSON.stringify(data)))&#xD;} else if (chosen_method == "POST") {&#xD;    fetch(url, {&#xD;            method: chosen_method,&#xD;            headers: {&#xD;                &apos;Content-Type&apos;: &apos;application/json&apos;,&#xD;            },&#xD;            body: JSON.stringify(payload)&#xD;        })&#xD;        .then(response =&gt; response.json())&#xD;        .then(data =&gt; proc.homeContext.variables.setVar("response", JSON.stringify(data)))&#xD;}</l></block><list><block var="method"/><block var="url"/><block var="payload"/><block var="headers"/></list></block><block s="doWait"><l>0.5</l></block><block s="doReport"><block var="response"/></block></script></block-definition><block-definition s="Digital Write Pin: %&apos;ARG&apos; %&apos;on/off&apos;" type="command" category="ebrain"><header></header><code></code><translations></translations><inputs><input type="%s" initial="1">4<options>4&#xD;5&#xD;10&#xD;16&#xD;14&#xD;12&#xD;13&#xD;0&#xD;2</options></input><input type="%b" initial="1">true</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>cmd</l><l>pin</l><l>io</l></list><l> eb.send_msg({&apos;cmd&apos;:cmd,&apos;pin&apos;:pin,&apos;value&apos;:io},function(msg){});</l></block><list><l>digital_write</l><block var="ARG"/><block var="on/off"/></list></block></script></block-definition><block-definition s="Digital Read Pin: %&apos;pin&apos;" type="reporter" category="ebrain"><header></header><code></code><translations></translations><inputs><input type="%s" initial="1">4<options>4&#xD;5&#xD;10&#xD;16&#xD;14&#xD;12&#xD;13&#xD;0&#xD;2</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>cmd</l><l>pin</l></list><l>snapBlocking = 0; &#xD;eb.send_msg({&apos;cmd&apos;:cmd,&apos;pin&apos;:pin},function(msg){&#xD;  snapBlocking = 1; &#xD;  ebMSG = msg.value;&#xD;});</l></block><list><l>digital_read</l><block var="pin"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return snapBlocking;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return ebMSG;</l></block><list></list></block></block></script></block-definition><block-definition s="Analog Input" type="reporter" category="ebrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>cmd</l></list><l>snapBlocking = 0; &#xD;eb.send_msg({&apos;cmd&apos;:cmd},function(msg){&#xD;  snapBlocking = 1; &#xD;  ebMSG = msg.value;&#xD;});</l></block><list><l>analog_read</l></list><comment w="90" collapsed="false">Anlog Read is non-Blocking, and will report old value until a new one comes in</comment></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return ebMSG;</l></block><list></list></block></block></script><scripts><script x="17.692307692307693" y="225.26153846153844"><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return snapBlocking;</l></block><list></list></block><comment w="90" collapsed="false">add this befor the Report command to make Anlalog Read wait for new data before reporting</comment></block></script></scripts></block-definition><block-definition s="Ultrasonic Distance Trig: %&apos;Trig&apos; Echo %&apos;Echo&apos;" type="reporter" category="ebrain"><header></header><code></code><translations></translations><inputs><input type="%s" initial="1"></input><input type="%s" initial="1"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>cmd</l><l>trig</l><l>echo</l></list><l>snapBlocking = 0; &#xD;eb.send_msg({&apos;cmd&apos;:cmd,&apos;trig_pin&apos;:trig,&apos;echo_pin&apos;:echo},function(msg){&#xD;  snapBlocking = 1; &#xD;  ebMSG = msg.distance_cm;&#xD;});</l></block><list><l>ultrasonic_distance</l><block var="Trig"/><block var="Echo"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return snapBlocking;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return ebMSG;</l></block><list></list></block></block></script></block-definition><block-definition s="create %&apos;scope&apos; var %&apos;names&apos;" type="command" category="variables"><comment x="0" y="0" w="146" collapsed="false">This block creates  new variables on the selected scope: global (for all sprites), sprite (for this sprite only) or script (only for that blocks stack) with the names given (in &apos;names&apos; list).&#xD;&#xD;If there is already a variable with that name in that scope, it does nothing: no errors and no overwrites.</comment><header></header><code></code><translations>pt:cria as variáveis _ _&#xD;ca:crea les _ variables _&#xD;es:crear las _ variables _&#xD;de:erstellen _ var _&#xD;</translations><inputs><input type="%s" readonly="true">global<options>global&#xD;sprite&#xD;script</options></input><input type="%mult%txt"></input></inputs><script><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="scope"/><l>script</l></list></block><script><block s="doForEach"><l>each item</l><block var="names"/><script><block s="doRun"><block s="reportJSFunction"><list><l>varName</l><l>proc</l></list><l>if ((typeof varName) != "string" || varName === "") {&#xD;    throw new Error("name isn&apos;t a string: " + varName);&#xD;}&#xD;if (!proc.homeContext.variables.vars[varName]) proc.homeContext.variables.addVar(varName);</l></block><list><block var="each item"/></list></block></script></block></script><script><block s="doDeclareVariables"><list><l>global</l></list></block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="scope"/><l>sprite</l></list></block><script><block s="doSetVar"><l>global</l><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><script><block s="doSetVar"><l>global</l><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block><block s="doForEach"><l>each item</l><block var="names"/><script><block s="doRun"><block s="reportJSFunction"><list><l>varName</l><l>global</l><l>proc</l></list><l>if ((typeof varName) != "string" || varName === "") {&#xD;    throw new Error("name isn&apos;t a string: " + varName);&#xD;}&#xD;if (global &amp;&amp; !proc.homeContext.variables.parentFrame.parentFrame.vars[varName]) this.addVariable(varName, true);&#xD;if (!global &amp;&amp; !proc.homeContext.variables.parentFrame.vars[varName]) this.addVariable(varName, false);</l></block><list><block var="each item"/><block var="global"/></list></block></script></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var ide = this.parentThatIsA(IDE_Morph);&#xD;ide.flushBlocksCache(&apos;variables&apos;); // b/c of inheritance&#xD;ide.refreshPalette();</l></block><list></list></block></script></block></script></block-definition></blocks>